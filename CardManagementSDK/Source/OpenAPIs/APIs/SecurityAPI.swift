//
// SecurityAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal class SecurityAPI {

    /**
     Request OAuth2.0 Token
     
     - parameter grantType: (form) Grant type 
     - parameter clientId: (form) Fill the client ID 
     - parameter clientSecret: (form) Fill the client Secret 
     - returns: TokenResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func authorize(grantType: String, clientId: String, clientSecret: String) async throws -> TokenResponse {
        return try await authorizeWithRequestBuilder(grantType: grantType, clientId: clientId, clientSecret: clientSecret).execute().body
    }

    /**
     Request OAuth2.0 Token
     - POST /Sandbox/CardServices/V1/Token
     - Get your access token to access other APIs
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter grantType: (form) Grant type 
     - parameter clientId: (form) Fill the client ID 
     - parameter clientSecret: (form) Fill the client Secret 
     - returns: RequestBuilder<TokenResponse> 
     */
    internal class func authorizeWithRequestBuilder(grantType: String, clientId: String, clientSecret: String) -> RequestBuilder<TokenResponse> {
        let localVariablePath = "/Sandbox/CardServices/V1/Token"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "grant_type": grantType.encodeToJSON(),
            "client_id": clientId.encodeToJSON(),
            "client_secret": clientSecret.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Change PIN for an existing card
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func changePIN(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINChangeRequest) async throws {
        return try await changePINWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId, body: body).execute().body
    }

    /**
     Change PIN for an existing card
     - POST /security/change_pin
     - This API should be called to change PIN to an existing Card with old PIN validation. The values exchanged here are both old and new PIN Block (ISO9564) generated by the consumer of this API and encrypted using either symmetric or asymmetric key.
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    internal class func changePINWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINChangeRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/security/change_pin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns a public key in a X.509 certificate which must be used to encrypt the generated PIN Block
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - returns: PINCertificateResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func getPINCertificate(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String) async throws -> PINCertificateResponse {
        return try await getPINCertificateWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId).execute().body
    }

    /**
     Returns a public key in a X.509 certificate which must be used to encrypt the generated PIN Block
     - GET /security/pin_certificate
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - returns: RequestBuilder<PINCertificateResponse> 
     */
    internal class func getPINCertificateWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String) -> RequestBuilder<PINCertificateResponse> {
        let localVariablePath = "/security/pin_certificate"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PINCertificateResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sets a new PIN for an existing card
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func setPIN(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINSetRequest) async throws {
        return try await setPINWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId, body: body).execute().body
    }

    /**
     Sets a new PIN for an existing card
     - POST /security/set_pin
     - This API should be called to set a new PIN to an existing Card. The value exchanged here is the PIN Block (ISO9564) generated by the consumer of this API and encrypted using either symmetric or asymmetric key.
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    internal class func setPINWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINSetRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/security/set_pin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Verifies a PIN for a card against the Card Management System
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: Void
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func verifyPIN(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINVerificationRequest) async throws {
        return try await verifyPINWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId, body: body).execute().body
    }

    /**
     Verifies a PIN for a card against the Card Management System
     - POST /security/verify_pin
     - This API should be called to verify the identity of a cardholder through your channels.  The value exchanged here is the PIN Block (ISO9564) generated by the consumer of this API and encrypted using either symmetric or asymmetric key.
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: RequestBuilder<Void> 
     */
    internal class func verifyPINWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINVerificationRequest) -> RequestBuilder<Void> {
        let localVariablePath = "/security/verify_pin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Fetches an encrypted PIN for a card against the Card Management System
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: PINViewResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func viewPIN(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINViewRequest) async throws -> PINViewResponse {
        return try await viewPINWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId, body: body).execute().body
    }

    /**
     Fetches an encrypted PIN for a card against the Card Management System
     - POST /security/view_pin
     - This API should be called to fetch the PIN of a card through your channels.  The value exchanged here is the PIN retrieved by the Card Management System and encrypted using the X509 Certificate provided in input.
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: RequestBuilder<PINViewResponse> 
     */
    internal class func viewPINWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: PINViewRequest) -> RequestBuilder<PINViewResponse> {
        let localVariablePath = "/security/view_pin"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PINViewResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
