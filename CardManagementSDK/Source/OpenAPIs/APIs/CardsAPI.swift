//
// CardsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

typealias CardIdentifierType = String
//internal enum CardIdentifierType: String, Codable, CaseIterable {
//    case exid = "EXID"
//    case contractNumber = "CONTRACT_NUMBER"
//}

internal class CardsAPI {

    /**
     Fetches alternative identifier for specified card
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: CardLookupResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func cardLookup(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: CardLookupRequest) async throws -> CardLookupResponse {
        return try await cardLookupWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId, body: body).execute().body
    }

    /**
     Fetches alternative identifier for specified card
     - POST /cards/lookup
     - Provides alternative identifier for provided input. If EXID is provided in input, this API will return the clear PAN (type: CONTRACT_NUMBER). If clear PAN (type: CONTRACT_NUMBER) is provided, will return EXID. Supported card_identifier_type: EXID/CONTRACT_NUMBER
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter body: (body)  
     - returns: RequestBuilder<CardLookupResponse> 
     */
    internal class func cardLookupWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, body: CardLookupRequest) -> RequestBuilder<CardLookupResponse> {
        let localVariablePath = "/cards/lookup"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CardLookupResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Retrieves secured card details such as Encrypted PAN, Card Expiry and Encrypted CVV2 and card product information
     
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter cardIdentifierId: (path) ID of card to return 
     - parameter body: (body) Public Key required to encrypt the CVV2 
     - parameter cardIdentifierType: (query) Card Identifier Type:  * &#x60;EXID&#x60; - External Id  * &#x60;CONTRACT_NUMBER&#x60; - Clear PAN  (optional)
     - returns: CardDetailsSecuredResponse
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    internal class func securedCardDetails(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, cardIdentifierId: String, body: CardDetailsSecuredRequest, cardIdentifierType: CardIdentifierType? = nil) async throws -> CardDetailsSecuredResponse {
        return try await securedCardDetailsWithRequestBuilder(authorization: authorization, uniqueReferenceCode: uniqueReferenceCode, financialId: financialId, channelId: channelId, cardIdentifierId: cardIdentifierId, body: body, cardIdentifierType: cardIdentifierType).execute().body
    }

    /**
     Retrieves secured card details such as Encrypted PAN, Card Expiry and Encrypted CVV2 and card product information
     - POST /cards/{card_identifier_id}/secured
     - OAuth:
       - type: oauth2
       - name: network_auth
     - parameter authorization: (header) Authentication Token to be passed as Bearer 
     - parameter uniqueReferenceCode: (header) Unique Reference Code for identification of each request sent to API 
     - parameter financialId: (header) Source Entity 
     - parameter channelId: (header) Requesting Channel 
     - parameter cardIdentifierId: (path) ID of card to return 
     - parameter body: (body) Public Key required to encrypt the CVV2 
     - parameter cardIdentifierType: (query) Card Identifier Type:  * &#x60;EXID&#x60; - External Id  * &#x60;CONTRACT_NUMBER&#x60; - Clear PAN  (optional)
     - returns: RequestBuilder<CardDetailsSecuredResponse> 
     */
    internal class func securedCardDetailsWithRequestBuilder(authorization: String, uniqueReferenceCode: String, financialId: String, channelId: String, cardIdentifierId: String, body: CardDetailsSecuredRequest, cardIdentifierType: CardIdentifierType? = nil) -> RequestBuilder<CardDetailsSecuredResponse> {
        var localVariablePath = "/cards/{card_identifier_id}/secured"
        let cardIdentifierIdPreEscape = "\(APIHelper.mapValueToPathItem(cardIdentifierId))"
        let cardIdentifierIdPostEscape = cardIdentifierIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{card_identifier_id}", with: cardIdentifierIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "card_identifier_type": (wrappedValue: cardIdentifierType?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
            "Authorization": authorization.encodeToJSON(),
            "Unique-Reference-Code": uniqueReferenceCode.encodeToJSON(),
            "Financial-Id": financialId.encodeToJSON(),
            "Channel-Id": channelId.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CardDetailsSecuredResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
