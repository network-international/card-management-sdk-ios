//
// Limit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct Limit: Codable, JSONEncodable, Hashable {

    internal var limitType: String
    internal var scopeCode: String?
    internal var currency: String
    internal var maxNumber: String?
    internal var maxSingleAmount: String?
    internal var maxAmount: String?
    internal var startDate: String?
    internal var endDate: String?

    internal init(limitType: String, scopeCode: String? = nil, currency: String, maxNumber: String? = nil, maxSingleAmount: String? = nil, maxAmount: String? = nil, startDate: String? = nil, endDate: String? = nil) {
        self.limitType = limitType
        self.scopeCode = scopeCode
        self.currency = currency
        self.maxNumber = maxNumber
        self.maxSingleAmount = maxSingleAmount
        self.maxAmount = maxAmount
        self.startDate = startDate
        self.endDate = endDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case limitType = "limit_type"
        case scopeCode = "scope_code"
        case currency
        case maxNumber = "max_number"
        case maxSingleAmount = "max_single_amount"
        case maxAmount = "max_amount"
        case startDate = "start_date"
        case endDate = "end_date"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(limitType, forKey: .limitType)
        try container.encodeIfPresent(scopeCode, forKey: .scopeCode)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(maxNumber, forKey: .maxNumber)
        try container.encodeIfPresent(maxSingleAmount, forKey: .maxSingleAmount)
        try container.encodeIfPresent(maxAmount, forKey: .maxAmount)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
    }
}

