//
// ClientUpdateBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct ClientUpdateBody: Codable, JSONEncodable, Hashable {

    static let customerIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let bankCodeRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let externalClientNumberRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardNameRule = StringRule(minLength: 1, maxLength: 21, pattern: nil)
    static let cardTypeRule = StringRule(minLength: 1, maxLength: 7, pattern: nil)
    /** Customer ID: Customer Identification number    This should be a unique number */
    internal var customerId: String
    /** Bank code is Unique Id 3 digit number for each client and the same will be provided once the client setup is completed in our core system.    For sandbox testing – “982” is used */
    internal var bankCode: String
    /** additional identifier for the client that is generated by FI system */
    internal var externalClientNumber: String?
    /** Card embossing name defined on client level (Upper case) */
    internal var cardName: String
    /** Values are restricted PREPAID CREDIT DEBIT */
    internal var cardType: String?
    internal var personalDetails: ClientUpdateBodyPersonalDetails?
    internal var contactDetails: ClientUpdateBodyContactDetails?
    internal var addresses: Addresses?
    internal var identityProofDocument: IdentityProofDocument?
    internal var supplementaryDocuments: SupplementaryDocuments?
    internal var employmentDetails: EmploymentDetails?
    internal var customFields: [CustomFields]

    internal init(customerId: String, bankCode: String, externalClientNumber: String? = nil, cardName: String, cardType: String? = nil, personalDetails: ClientUpdateBodyPersonalDetails? = nil, contactDetails: ClientUpdateBodyContactDetails? = nil, addresses: Addresses? = nil, identityProofDocument: IdentityProofDocument? = nil, supplementaryDocuments: SupplementaryDocuments? = nil, employmentDetails: EmploymentDetails? = nil, customFields: [CustomFields]) {
        self.customerId = customerId
        self.bankCode = bankCode
        self.externalClientNumber = externalClientNumber
        self.cardName = cardName
        self.cardType = cardType
        self.personalDetails = personalDetails
        self.contactDetails = contactDetails
        self.addresses = addresses
        self.identityProofDocument = identityProofDocument
        self.supplementaryDocuments = supplementaryDocuments
        self.employmentDetails = employmentDetails
        self.customFields = customFields
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case customerId = "customer_id"
        case bankCode = "bank_code"
        case externalClientNumber = "external_client_number"
        case cardName = "card_name"
        case cardType = "card_type"
        case personalDetails = "personal_details"
        case contactDetails = "contact_details"
        case addresses
        case identityProofDocument = "identity_proof_document"
        case supplementaryDocuments = "supplementary_documents"
        case employmentDetails = "employment_details"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerId, forKey: .customerId)
        try container.encode(bankCode, forKey: .bankCode)
        try container.encodeIfPresent(externalClientNumber, forKey: .externalClientNumber)
        try container.encode(cardName, forKey: .cardName)
        try container.encodeIfPresent(cardType, forKey: .cardType)
        try container.encodeIfPresent(personalDetails, forKey: .personalDetails)
        try container.encodeIfPresent(contactDetails, forKey: .contactDetails)
        try container.encodeIfPresent(addresses, forKey: .addresses)
        try container.encodeIfPresent(identityProofDocument, forKey: .identityProofDocument)
        try container.encodeIfPresent(supplementaryDocuments, forKey: .supplementaryDocuments)
        try container.encodeIfPresent(employmentDetails, forKey: .employmentDetails)
        try container.encode(customFields, forKey: .customFields)
    }
}

