//
// Cards.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct Cards: Codable, JSONEncodable, Hashable {

    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let maskedPanRule = StringRule(minLength: 1, maxLength: 16, pattern: nil)
    static let cardDisplayNameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let cIFNumberRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardExpiryDateRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let cardRoleRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let accountNumberRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    static let productCodeRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardVirtualIndicatorRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    /** Card Identifier Id */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** Masked PAN */
    internal var maskedPan: String
    /** Embossed Name */
    internal var cardDisplayName: String
    /** CIF Number */
    internal var cIFNumber: String
    /** YYMM Ex 2310 */
    internal var cardExpiryDate: String
    /** Card Role Primary/Supplementary */
    internal var cardRole: String
    /** Account number */
    internal var accountNumber: String
    /** Product code */
    internal var productCode: String
    /** P/V */
    internal var cardVirtualIndicator: String
    internal var statuses: [Statuses]?
    internal var balances: [Listofcardsbalances]?
    internal var customFields: [CustomFields]?

    internal init(cardIdentifierId: String, cardIdentifierType: String, maskedPan: String, cardDisplayName: String, cIFNumber: String, cardExpiryDate: String, cardRole: String, accountNumber: String, productCode: String, cardVirtualIndicator: String, statuses: [Statuses]? = nil, balances: [Listofcardsbalances]? = nil, customFields: [CustomFields]? = nil) {
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.maskedPan = maskedPan
        self.cardDisplayName = cardDisplayName
        self.cIFNumber = cIFNumber
        self.cardExpiryDate = cardExpiryDate
        self.cardRole = cardRole
        self.accountNumber = accountNumber
        self.productCode = productCode
        self.cardVirtualIndicator = cardVirtualIndicator
        self.statuses = statuses
        self.balances = balances
        self.customFields = customFields
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case maskedPan = "masked_pan"
        case cardDisplayName = "card_display_name"
        case cIFNumber = "CIF_number"
        case cardExpiryDate = "card_expiry_date"
        case cardRole = "card_role"
        case accountNumber = "account_number"
        case productCode = "product_code"
        case cardVirtualIndicator = "card_virtual_indicator"
        case statuses
        case balances
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encode(maskedPan, forKey: .maskedPan)
        try container.encode(cardDisplayName, forKey: .cardDisplayName)
        try container.encode(cIFNumber, forKey: .cIFNumber)
        try container.encode(cardExpiryDate, forKey: .cardExpiryDate)
        try container.encode(cardRole, forKey: .cardRole)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encode(productCode, forKey: .productCode)
        try container.encode(cardVirtualIndicator, forKey: .cardVirtualIndicator)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(balances, forKey: .balances)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

