//
// CardDetailsEnquiryBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardDetailsEnquiryBody: Codable, JSONEncodable, Hashable {

    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardExpiryDateRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let cardSequenceNumberRule = StringRule(minLength: 1, maxLength: 2, pattern: nil)
    /** Card Identifier Id */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** YYMM */
    internal var cardExpiryDate: String?
    /** Sample Values 01 */
    internal var cardSequenceNumber: String?

    internal init(cardIdentifierId: String, cardIdentifierType: String, cardExpiryDate: String? = nil, cardSequenceNumber: String? = nil) {
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.cardExpiryDate = cardExpiryDate
        self.cardSequenceNumber = cardSequenceNumber
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case cardExpiryDate = "card_expiry_date"
        case cardSequenceNumber = "card_sequence_number"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encodeIfPresent(cardExpiryDate, forKey: .cardExpiryDate)
        try container.encodeIfPresent(cardSequenceNumber, forKey: .cardSequenceNumber)
    }
}

