//
// RefinanceTransactionHeader.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct RefinanceTransactionHeader: Codable, JSONEncodable, Hashable {

    static let planNumberRule = StringRule(minLength: 1, maxLength: 12, pattern: nil)
    static let instalmentDescriptionRule = StringRule(minLength: 1, maxLength: 12, pattern: nil)
    /** The msg_id sent in the request will be sent back in response in this fields */
    internal var planNumber: String
    /** Request Type  IPP Transaction Conversion */
    internal var instalmentDescription: String
    internal var currency: String
    internal var amount: String
    internal var rrn: String
    internal var authCode: String?
    internal var channel: String

    internal init(planNumber: String, instalmentDescription: String, currency: String, amount: String, rrn: String, authCode: String? = nil, channel: String) {
        self.planNumber = planNumber
        self.instalmentDescription = instalmentDescription
        self.currency = currency
        self.amount = amount
        self.rrn = rrn
        self.authCode = authCode
        self.channel = channel
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case planNumber = "plan_number"
        case instalmentDescription = "instalment_description"
        case currency
        case amount
        case rrn
        case authCode = "auth_code"
        case channel
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(planNumber, forKey: .planNumber)
        try container.encode(instalmentDescription, forKey: .instalmentDescription)
        try container.encode(currency, forKey: .currency)
        try container.encode(amount, forKey: .amount)
        try container.encode(rrn, forKey: .rrn)
        try container.encodeIfPresent(authCode, forKey: .authCode)
        try container.encode(channel, forKey: .channel)
    }
}

