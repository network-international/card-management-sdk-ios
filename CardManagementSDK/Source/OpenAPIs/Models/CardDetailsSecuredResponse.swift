//
// CardDetailsSecuredResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardDetailsSecuredResponse: Codable, JSONEncodable, Hashable {

    /** Encrypted PAN under the provided public key  */
    internal var encryptedPan: String?
    internal var maskedPan: String?
    /** Card Expiry Date YYMM format  */
    internal var expiry: String?
    /** CVV2 Encrypted under the provided public key  */
    internal var encryptedCvv2: String?
    /** Embossing name on the card  */
    internal var cardholderName: String?
    /** Fourth line embossing (e.g. company name, loyalty membership number)  */
    internal var embossingLine4: String?
    /** Full produce code for the card  */
    internal var productCode: String?
    /** Short code for the product of the card (E.g. 001)  */
    internal var productShortCode: String?
    /** Product display name (e.g. VISA Classic)  */
    internal var productName: String?
    /** Card Brand (E.g. Visa, MasterCard, etc.). Can be used to provide visual representation of the card  */
    internal var cardBrand: String?

    internal init(encryptedPan: String? = nil, maskedPan: String? = nil, expiry: String? = nil, encryptedCvv2: String? = nil, cardholderName: String? = nil, embossingLine4: String? = nil, productCode: String? = nil, productShortCode: String? = nil, productName: String? = nil, cardBrand: String? = nil) {
        self.encryptedPan = encryptedPan
        self.maskedPan = maskedPan
        self.expiry = expiry
        self.encryptedCvv2 = encryptedCvv2
        self.cardholderName = cardholderName
        self.embossingLine4 = embossingLine4
        self.productCode = productCode
        self.productShortCode = productShortCode
        self.productName = productName
        self.cardBrand = cardBrand
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case encryptedPan = "encrypted_pan"
        case maskedPan = "masked_pan"
        case expiry
        case encryptedCvv2 = "encrypted_cvv2"
        case cardholderName = "cardholder_name"
        case embossingLine4 = "embossing_line4"
        case productCode = "product_code"
        case productShortCode = "product_short_code"
        case productName = "product_name"
        case cardBrand = "card_brand"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(encryptedPan, forKey: .encryptedPan)
        try container.encodeIfPresent(maskedPan, forKey: .maskedPan)
        try container.encodeIfPresent(expiry, forKey: .expiry)
        try container.encodeIfPresent(encryptedCvv2, forKey: .encryptedCvv2)
        try container.encodeIfPresent(cardholderName, forKey: .cardholderName)
        try container.encodeIfPresent(embossingLine4, forKey: .embossingLine4)
        try container.encodeIfPresent(productCode, forKey: .productCode)
        try container.encodeIfPresent(productShortCode, forKey: .productShortCode)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(cardBrand, forKey: .cardBrand)
    }
}

