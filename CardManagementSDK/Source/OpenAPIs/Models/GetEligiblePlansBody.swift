//
// GetEligiblePlansBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct GetEligiblePlansBody: Codable, JSONEncodable, Hashable {

    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let transIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let actionRule = StringRule(minLength: 1, maxLength: 15, pattern: nil)
    static let balanceAmountRule = StringRule(minLength: 1, maxLength: 28, pattern: nil)
    /** card identifier */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER  is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** Transaction Id */
    internal var transId: String?
    /** This describes the action for which the elibilge plans should be checked ex - balance_conversion, balance_transfer, loan */
    internal var action: String?
    /** Balance amount */
    internal var balanceAmount: String?

    internal init(cardIdentifierId: String, cardIdentifierType: String, transId: String? = nil, action: String? = nil, balanceAmount: String? = nil) {
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.transId = transId
        self.action = action
        self.balanceAmount = balanceAmount
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case transId = "trans_id"
        case action
        case balanceAmount = "balance_amount"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encodeIfPresent(transId, forKey: .transId)
        try container.encodeIfPresent(action, forKey: .action)
        try container.encodeIfPresent(balanceAmount, forKey: .balanceAmount)
    }
}

