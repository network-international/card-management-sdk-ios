//
// CustomerDetailsBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CustomerDetailsBody: Codable, JSONEncodable, Hashable {

    static let customerIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    /** Either Customer ID or Card Identifier Id */
    internal var customerId: String
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierId: String?
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS. */
    internal var cardIdentifierType: String?

    internal init(customerId: String, cardIdentifierId: String? = nil, cardIdentifierType: String? = nil) {
        self.customerId = customerId
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case customerId = "customer_id"
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerId, forKey: .customerId)
        try container.encodeIfPresent(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encodeIfPresent(cardIdentifierType, forKey: .cardIdentifierType)
    }
}

