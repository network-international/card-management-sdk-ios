//
// CardReplacementResBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardReplacementResBody: Codable, JSONEncodable, Hashable {

    static let newCardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let newCardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let newCardExpiryDateRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let newMaskedPanRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    /** Card Identifier Id */
    internal var newCardIdentifierId: String
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var newCardIdentifierType: String
    /** YYMM */
    internal var newCardExpiryDate: String
    /** Masked card number */
    internal var newMaskedPan: String

    internal init(newCardIdentifierId: String, newCardIdentifierType: String, newCardExpiryDate: String, newMaskedPan: String) {
        self.newCardIdentifierId = newCardIdentifierId
        self.newCardIdentifierType = newCardIdentifierType
        self.newCardExpiryDate = newCardExpiryDate
        self.newMaskedPan = newMaskedPan
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case newCardIdentifierId = "new_card_identifier_id"
        case newCardIdentifierType = "new_card_identifier_type"
        case newCardExpiryDate = "new_card_expiry_date"
        case newMaskedPan = "new_masked_pan"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(newCardIdentifierId, forKey: .newCardIdentifierId)
        try container.encode(newCardIdentifierType, forKey: .newCardIdentifierType)
        try container.encode(newCardExpiryDate, forKey: .newCardExpiryDate)
        try container.encode(newMaskedPan, forKey: .newMaskedPan)
    }
}

