//
// CardTransactionsBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardTransactionsBody: Codable, JSONEncodable, Hashable {

    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let walletIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    /** card identifier */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER  is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** Wallet id, Mandatory for prepaid cards only */
    internal var walletId: String?
    internal var transaction: Transactions

    internal init(cardIdentifierId: String, cardIdentifierType: String, walletId: String? = nil, transaction: Transactions) {
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.walletId = walletId
        self.transaction = transaction
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case walletId = "wallet_id"
        case transaction
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encodeIfPresent(walletId, forKey: .walletId)
        try container.encode(transaction, forKey: .transaction)
    }
}

