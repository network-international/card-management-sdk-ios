//
// CardDetailsResBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardDetailsResBody: Codable, JSONEncodable, Hashable {

    static let customerIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let institutionIdRule = StringRule(minLength: 1, maxLength: 5, pattern: nil)
    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let maskedPanRule = StringRule(minLength: 1, maxLength: 16, pattern: nil)
    static let cardExpiryDateRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let cardholderNameRule = StringRule(minLength: 1, maxLength: 26, pattern: nil)
    static let accountNumberRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let productCodeRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let cardRoleRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let lastStatementDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let nextStatementDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let dueDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let cardDateOpenRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let cardActivationDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let currencyRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let cardVirtualIndicatorRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    /** Customer ID: Customer Identification number    This should be a unique number */
    internal var customerId: String
    /** institution id is the code that is created for each bank or FI(it is the same value as bank code), 982 value is just used as an example in Sandbox */
    internal var institutionId: String?
    /** Card identifier id */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER  is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** Masked PAN */
    internal var maskedPan: String?
    /** YYMM Ex: 2310 */
    internal var cardExpiryDate: String
    /** Card holder's name */
    internal var cardholderName: String
    /** Account number */
    internal var accountNumber: String
    /** Product code, this code is generated by CMS after creating the product, this code is FI spesific code 982_AED_002_P is just used as an example in Sandbox */
    internal var productCode: String?
    /** P (Primary) / S (Supplementary) */
    internal var cardRole: String
    /** Last Statement Date */
    internal var lastStatementDate: String
    /** Next Statement Date */
    internal var nextStatementDate: String
    /** Due date */
    internal var dueDate: String
    /** Card open date */
    internal var cardDateOpen: String
    /** Card activation date */
    internal var cardActivationDate: String
    /** Currency , Example - AED */
    internal var currency: String
    /** P for Physical, V for virtual */
    internal var cardVirtualIndicator: String?
    internal var linkedAccounts: [LinkedAccounts]?
    internal var statuses: [Statuses]?
    internal var limits: [Limits]?
    internal var balances: [Balances]?
    internal var customFields: [CustomFields]?

    internal init(customerId: String, institutionId: String? = nil, cardIdentifierId: String, cardIdentifierType: String, maskedPan: String? = nil, cardExpiryDate: String, cardholderName: String, accountNumber: String, productCode: String? = nil, cardRole: String, lastStatementDate: String, nextStatementDate: String, dueDate: String, cardDateOpen: String, cardActivationDate: String, currency: String, cardVirtualIndicator: String? = nil, linkedAccounts: [LinkedAccounts]? = nil, statuses: [Statuses]? = nil, limits: [Limits]? = nil, balances: [Balances]? = nil, customFields: [CustomFields]? = nil) {
        self.customerId = customerId
        self.institutionId = institutionId
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.maskedPan = maskedPan
        self.cardExpiryDate = cardExpiryDate
        self.cardholderName = cardholderName
        self.accountNumber = accountNumber
        self.productCode = productCode
        self.cardRole = cardRole
        self.lastStatementDate = lastStatementDate
        self.nextStatementDate = nextStatementDate
        self.dueDate = dueDate
        self.cardDateOpen = cardDateOpen
        self.cardActivationDate = cardActivationDate
        self.currency = currency
        self.cardVirtualIndicator = cardVirtualIndicator
        self.linkedAccounts = linkedAccounts
        self.statuses = statuses
        self.limits = limits
        self.balances = balances
        self.customFields = customFields
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case customerId = "customer_id"
        case institutionId = "institution_id"
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case maskedPan = "masked_pan"
        case cardExpiryDate = "card_expiry_date"
        case cardholderName = "cardholder_name"
        case accountNumber = "account_number"
        case productCode = "product_code"
        case cardRole = "card_role"
        case lastStatementDate = "last_statement_date"
        case nextStatementDate = "next_statement_date"
        case dueDate = "due_date"
        case cardDateOpen = "card_date_open"
        case cardActivationDate = "card_activation_date"
        case currency
        case cardVirtualIndicator = "card_virtual_indicator"
        case linkedAccounts = "linked_accounts"
        case statuses
        case limits
        case balances
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerId, forKey: .customerId)
        try container.encodeIfPresent(institutionId, forKey: .institutionId)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encodeIfPresent(maskedPan, forKey: .maskedPan)
        try container.encode(cardExpiryDate, forKey: .cardExpiryDate)
        try container.encode(cardholderName, forKey: .cardholderName)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(productCode, forKey: .productCode)
        try container.encode(cardRole, forKey: .cardRole)
        try container.encode(lastStatementDate, forKey: .lastStatementDate)
        try container.encode(nextStatementDate, forKey: .nextStatementDate)
        try container.encode(dueDate, forKey: .dueDate)
        try container.encode(cardDateOpen, forKey: .cardDateOpen)
        try container.encode(cardActivationDate, forKey: .cardActivationDate)
        try container.encode(currency, forKey: .currency)
        try container.encodeIfPresent(cardVirtualIndicator, forKey: .cardVirtualIndicator)
        try container.encodeIfPresent(linkedAccounts, forKey: .linkedAccounts)
        try container.encodeIfPresent(statuses, forKey: .statuses)
        try container.encodeIfPresent(limits, forKey: .limits)
        try container.encodeIfPresent(balances, forKey: .balances)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

