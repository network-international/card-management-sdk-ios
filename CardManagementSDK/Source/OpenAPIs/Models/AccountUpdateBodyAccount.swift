//
// AccountUpdateBodyAccount.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AccountUpdateBodyAccount: Codable, JSONEncodable, Hashable {

    static let customerIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let branchCodeRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let accountNumberRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    /** Customer ID: Customer Identification number    This should be a unique number */
    internal var customerId: String
    /** Branch Code, if no branches are used, the code must be same as bank_code */
    internal var branchCode: String
    /** Account number (This can not be updated) */
    internal var accountNumber: String
    internal var customFields: [CustomFieldsCardCreate]?

    internal init(customerId: String, branchCode: String, accountNumber: String, customFields: [CustomFieldsCardCreate]? = nil) {
        self.customerId = customerId
        self.branchCode = branchCode
        self.accountNumber = accountNumber
        self.customFields = customFields
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case customerId = "customer_id"
        case branchCode = "branch_code"
        case accountNumber = "account_number"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerId, forKey: .customerId)
        try container.encode(branchCode, forKey: .branchCode)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

