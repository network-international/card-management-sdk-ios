//
// StatementDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct StatementDetails: Codable, JSONEncodable, Hashable {

    static let statementDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let lastStatementDateRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let statementOpeningBalanceRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let statementClosingBalanceRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let dueAmountRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let dueDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let fullPaymentAmountRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let interestThisStatementRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let statementAvailableBalanceRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    /** Billing Date */
    internal var statementDate: String
    /** Last billing date */
    internal var lastStatementDate: String
    /** Statement Opening balance */
    internal var statementOpeningBalance: String
    /** Statement Closing balance */
    internal var statementClosingBalance: String
    /** Due amount */
    internal var dueAmount: String?
    /** Statement due date in format YYYY-MM-DD */
    internal var dueDate: String?
    /** Full payment amount/interest free amount */
    internal var fullPaymentAmount: String?
    /** Interest amount in selected statement */
    internal var interestThisStatement: String?
    /** Available amount at the time of statement */
    internal var statementAvailableBalance: String
    internal var rewardPrograms: [RewardPrograms]?

    internal init(statementDate: String, lastStatementDate: String, statementOpeningBalance: String, statementClosingBalance: String, dueAmount: String? = nil, dueDate: String? = nil, fullPaymentAmount: String? = nil, interestThisStatement: String? = nil, statementAvailableBalance: String, rewardPrograms: [RewardPrograms]? = nil) {
        self.statementDate = statementDate
        self.lastStatementDate = lastStatementDate
        self.statementOpeningBalance = statementOpeningBalance
        self.statementClosingBalance = statementClosingBalance
        self.dueAmount = dueAmount
        self.dueDate = dueDate
        self.fullPaymentAmount = fullPaymentAmount
        self.interestThisStatement = interestThisStatement
        self.statementAvailableBalance = statementAvailableBalance
        self.rewardPrograms = rewardPrograms
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case statementDate = "statement_date"
        case lastStatementDate = "last_statement_date"
        case statementOpeningBalance = "statement_opening_balance"
        case statementClosingBalance = "statement_closing_balance"
        case dueAmount = "due_amount"
        case dueDate = "due_date"
        case fullPaymentAmount = "full_payment_amount"
        case interestThisStatement = "interest_this_statement"
        case statementAvailableBalance = "statement_available_balance"
        case rewardPrograms = "reward_programs"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(statementDate, forKey: .statementDate)
        try container.encode(lastStatementDate, forKey: .lastStatementDate)
        try container.encode(statementOpeningBalance, forKey: .statementOpeningBalance)
        try container.encode(statementClosingBalance, forKey: .statementClosingBalance)
        try container.encodeIfPresent(dueAmount, forKey: .dueAmount)
        try container.encodeIfPresent(dueDate, forKey: .dueDate)
        try container.encodeIfPresent(fullPaymentAmount, forKey: .fullPaymentAmount)
        try container.encodeIfPresent(interestThisStatement, forKey: .interestThisStatement)
        try container.encode(statementAvailableBalance, forKey: .statementAvailableBalance)
        try container.encodeIfPresent(rewardPrograms, forKey: .rewardPrograms)
    }
}

