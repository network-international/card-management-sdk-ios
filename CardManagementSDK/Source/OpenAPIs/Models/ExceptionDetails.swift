//
// ExceptionDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct ExceptionDetails: Codable, JSONEncodable, Hashable {

    static let applicationNameRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let dateTimeRule = StringRule(minLength: 1, maxLength: 30, pattern: nil)
    static let statusRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let errorCodeRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let errorDescriptionRule = StringRule(minLength: 1, maxLength: 100, pattern: nil)
    static let transactionRefIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    /** Application Name */
    internal var applicationName: String
    /** Timestamp of the response Format “YYYY-MM-DD  HH:MM:SS” */
    internal var dateTime: String
    /** Status of the request (S/F) */
    internal var status: String
    /** EAI Internal Error Code (Check error codes section for the complete list of error codes and error code descriptions) */
    internal var errorCode: String
    /** Error Description (Check error codes section for the complete list of error codes and error code descriptions) */
    internal var errorDescription: String
    /** The tracking_id sent in the request will be sent back in response in this field. */
    internal var transactionRefId: String?

    internal init(applicationName: String, dateTime: String, status: String, errorCode: String, errorDescription: String, transactionRefId: String? = nil) {
        self.applicationName = applicationName
        self.dateTime = dateTime
        self.status = status
        self.errorCode = errorCode
        self.errorDescription = errorDescription
        self.transactionRefId = transactionRefId
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case applicationName = "application_name"
        case dateTime = "date_time"
        case status
        case errorCode = "error_code"
        case errorDescription = "error_description"
        case transactionRefId = "transaction_ref_id"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(applicationName, forKey: .applicationName)
        try container.encode(dateTime, forKey: .dateTime)
        try container.encode(status, forKey: .status)
        try container.encode(errorCode, forKey: .errorCode)
        try container.encode(errorDescription, forKey: .errorDescription)
        try container.encodeIfPresent(transactionRefId, forKey: .transactionRefId)
    }
}

