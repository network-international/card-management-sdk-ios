//
// PINSetRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct PINSetRequest: Codable, JSONEncodable, Hashable {

    internal enum EncryptionMethod: String, Codable, CaseIterable {
        case symmetricEnc = "SYMMETRIC_ENC"
        case asymmetricEnc = "ASYMMETRIC_ENC"
    }
    internal enum EncryptionAlgorithm: String, Codable, CaseIterable {
        case tbd = "TBD"
    }
    /** Card Identifier Type:  * `EXID` - External Id  * `CONTRACT_NUMBER` - Clear PAN  */
    internal var cardIdentifierType: CardIdentifierType?
    /** Identifier related to the Identifier Type  */
    internal var cardIdentifierId: String
    /** Optional */
    internal var cardSequenceNumber: String?
    /** Optional - Expiry date YYMM */
    internal var cardExpiryDate: String?
    /** Encrypted PIN Block generated using ISO9564 algorithm. Encryption is governed by the encryption_method property */
    internal var encryptedPin: String
    /** * SYMMETRIC_ENC should be used if keys were exchanged between Network International and you   * ASYMMETRIC_ENC should be used if key was obtained using /security/pin_certificate API  */
    internal var encryptionMethod: EncryptionMethod
    /**  */
    internal var encryptionAlgorithm: EncryptionAlgorithm?

    internal init(cardIdentifierType: CardIdentifierType? = nil, cardIdentifierId: String, cardSequenceNumber: String? = nil, cardExpiryDate: String? = nil, encryptedPin: String, encryptionMethod: EncryptionMethod, encryptionAlgorithm: EncryptionAlgorithm? = nil) {
        self.cardIdentifierType = cardIdentifierType
        self.cardIdentifierId = cardIdentifierId
        self.cardSequenceNumber = cardSequenceNumber
        self.cardExpiryDate = cardExpiryDate
        self.encryptedPin = encryptedPin
        self.encryptionMethod = encryptionMethod
        self.encryptionAlgorithm = encryptionAlgorithm
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierType = "card_identifier_type"
        case cardIdentifierId = "card_identifier_id"
        case cardSequenceNumber = "card_sequence_number"
        case cardExpiryDate = "card_expiry_date"
        case encryptedPin = "encrypted_pin"
        case encryptionMethod = "encryption_method"
        case encryptionAlgorithm = "encryption_algorithm"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encodeIfPresent(cardSequenceNumber, forKey: .cardSequenceNumber)
        try container.encodeIfPresent(cardExpiryDate, forKey: .cardExpiryDate)
        try container.encode(encryptedPin, forKey: .encryptedPin)
        try container.encode(encryptionMethod, forKey: .encryptionMethod)
        try container.encodeIfPresent(encryptionAlgorithm, forKey: .encryptionAlgorithm)
    }
}

