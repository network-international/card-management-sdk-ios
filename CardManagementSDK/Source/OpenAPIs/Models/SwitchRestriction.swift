//
// SwitchRestriction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct SwitchRestriction: Codable, JSONEncodable, Hashable {

    static let scopeCodeRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let restrictionTypeRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let startDateRule = StringRule(minLength: 10, maxLength: 10, pattern: nil)
    static let endDateRule = StringRule(minLength: 10, maxLength: 10, pattern: nil)
    /** true/false */
    internal var isAllowed: Bool?
    /** Scope Code */
    internal var scopeCode: String?
    /** Type of restrictions */
    internal var restrictionType: String?
    /** Start Date */
    internal var startDate: String?
    /** End Date */
    internal var endDate: String?

    internal init(isAllowed: Bool? = nil, scopeCode: String? = nil, restrictionType: String? = nil, startDate: String? = nil, endDate: String? = nil) {
        self.isAllowed = isAllowed
        self.scopeCode = scopeCode
        self.restrictionType = restrictionType
        self.startDate = startDate
        self.endDate = endDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case isAllowed
        case scopeCode = "scope_code"
        case restrictionType = "restriction_type"
        case startDate = "start_date"
        case endDate = "end_date"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isAllowed, forKey: .isAllowed)
        try container.encodeIfPresent(scopeCode, forKey: .scopeCode)
        try container.encodeIfPresent(restrictionType, forKey: .restrictionType)
        try container.encodeIfPresent(startDate, forKey: .startDate)
        try container.encodeIfPresent(endDate, forKey: .endDate)
    }
}

