//
// Restrictions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct Restrictions: Codable, JSONEncodable, Hashable {

    static let restrictionTypeRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let endDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    /** Type of restrictions */
    internal var restrictionType: String?
    /** true/false */
    internal var isAllowed: Bool?
    /** Start date */
    internal var endDate: String?

    internal init(restrictionType: String? = nil, isAllowed: Bool? = nil, endDate: String? = nil) {
        self.restrictionType = restrictionType
        self.isAllowed = isAllowed
        self.endDate = endDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case restrictionType = "restriction_type"
        case isAllowed
        case endDate = "end_date"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(restrictionType, forKey: .restrictionType)
        try container.encodeIfPresent(isAllowed, forKey: .isAllowed)
        try container.encodeIfPresent(endDate, forKey: .endDate)
    }
}

