//
// TariffDetails.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct TariffDetails: Codable, JSONEncodable, Hashable {

    static let codeRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let feeBaseRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let feeMinRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let feeMaxRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let feePcntRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let isPersonalRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let currencyRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    /** Type of the balance */
    internal var code: String
    /** Limit currency */
    internal var feeBase: String?
    /** Type of the balance */
    internal var feeMin: String?
    /** Limit currency */
    internal var feeMax: String?
    /** Limit currency */
    internal var feePcnt: String?
    /** Type of the balance */
    internal var isPersonal: String?
    /** Currency code Ex: AED */
    internal var currency: String

    internal init(code: String, feeBase: String? = nil, feeMin: String? = nil, feeMax: String? = nil, feePcnt: String? = nil, isPersonal: String? = nil, currency: String) {
        self.code = code
        self.feeBase = feeBase
        self.feeMin = feeMin
        self.feeMax = feeMax
        self.feePcnt = feePcnt
        self.isPersonal = isPersonal
        self.currency = currency
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case feeBase = "fee_base"
        case feeMin = "fee_min"
        case feeMax = "fee_max"
        case feePcnt = "fee_pcnt"
        case isPersonal = "is_personal"
        case currency
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(code, forKey: .code)
        try container.encodeIfPresent(feeBase, forKey: .feeBase)
        try container.encodeIfPresent(feeMin, forKey: .feeMin)
        try container.encodeIfPresent(feeMax, forKey: .feeMax)
        try container.encodeIfPresent(feePcnt, forKey: .feePcnt)
        try container.encodeIfPresent(isPersonal, forKey: .isPersonal)
        try container.encode(currency, forKey: .currency)
    }
}

