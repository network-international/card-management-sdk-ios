//
// NISrvRequestLoanonCallQuickCashOverrideOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct NISrvRequestLoanonCallQuickCashOverrideOptions: Codable, JSONEncodable, Hashable {

    internal var numberOfPortions: String?
    internal var interestRate: String?
    internal var feeWaive: String?
    internal var adHocFeeType: String?
    internal var adHocFee: String?
    internal var gracePeriod: String?
    internal var freePeriodNumber: String?
    internal var portionAmount: String?
    internal var allocateInterestAmount: String?

    internal init(numberOfPortions: String? = nil, interestRate: String? = nil, feeWaive: String? = nil, adHocFeeType: String? = nil, adHocFee: String? = nil, gracePeriod: String? = nil, freePeriodNumber: String? = nil, portionAmount: String? = nil, allocateInterestAmount: String? = nil) {
        self.numberOfPortions = numberOfPortions
        self.interestRate = interestRate
        self.feeWaive = feeWaive
        self.adHocFeeType = adHocFeeType
        self.adHocFee = adHocFee
        self.gracePeriod = gracePeriod
        self.freePeriodNumber = freePeriodNumber
        self.portionAmount = portionAmount
        self.allocateInterestAmount = allocateInterestAmount
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case numberOfPortions = "number_of_portions"
        case interestRate = "interest_rate"
        case feeWaive = "fee_waive"
        case adHocFeeType = "ad-hoc_fee_type"
        case adHocFee = "ad-hoc_fee"
        case gracePeriod = "grace_period"
        case freePeriodNumber = "free_period_number"
        case portionAmount = "portion_amount"
        case allocateInterestAmount = "allocate_interest_amount"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(numberOfPortions, forKey: .numberOfPortions)
        try container.encodeIfPresent(interestRate, forKey: .interestRate)
        try container.encodeIfPresent(feeWaive, forKey: .feeWaive)
        try container.encodeIfPresent(adHocFeeType, forKey: .adHocFeeType)
        try container.encodeIfPresent(adHocFee, forKey: .adHocFee)
        try container.encodeIfPresent(gracePeriod, forKey: .gracePeriod)
        try container.encodeIfPresent(freePeriodNumber, forKey: .freePeriodNumber)
        try container.encodeIfPresent(portionAmount, forKey: .portionAmount)
        try container.encodeIfPresent(allocateInterestAmount, forKey: .allocateInterestAmount)
    }
}

