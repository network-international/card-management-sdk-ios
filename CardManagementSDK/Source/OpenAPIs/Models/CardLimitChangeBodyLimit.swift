//
// CardLimitChangeBodyLimit.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardLimitChangeBodyLimit: Codable, JSONEncodable, Hashable {

    static let limitTypeRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let currencyRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let valueRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let dateToRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    /** Refer to limits */
    internal var limitType: String?
    /** Currency code Ex AED */
    internal var currency: String?
    /** Value */
    internal var value: String?
    /** DD/MM/YYYY If Temporary Limit */
    internal var dateTo: String?

    internal init(limitType: String? = nil, currency: String? = nil, value: String? = nil, dateTo: String? = nil) {
        self.limitType = limitType
        self.currency = currency
        self.value = value
        self.dateTo = dateTo
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case limitType = "limit_type"
        case currency
        case value
        case dateTo = "date_to"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(limitType, forKey: .limitType)
        try container.encodeIfPresent(currency, forKey: .currency)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(dateTo, forKey: .dateTo)
    }
}

