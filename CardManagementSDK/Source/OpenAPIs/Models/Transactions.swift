//
// Transactions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct Transactions: Codable, JSONEncodable, Hashable {

    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let maskedPanRule = StringRule(minLength: 1, maxLength: 16, pattern: nil)
    static let transDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let postDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let debitCreditFlagRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let responseCodeRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let descriptionRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    static let transactionRefNumberRule = StringRule(minLength: 1, maxLength: 12, pattern: nil)
    static let currencyRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let amountRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let sourceCurrencyRule = StringRule(minLength: 1, maxLength: 3, pattern: nil)
    static let sourceAmountRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let authCodeRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let merchantIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let merchantCategoryCodeRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let merchantCategoryGroupRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let merchantNameRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    static let merchantAddressRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    static let merchantCityRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    static let merchantCountryRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    static let transactionCodeRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let transIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let balanceTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** card_identifier_id */
    internal var cardIdentifierId: String
    /** Pan in Masked form */
    internal var maskedPan: String
    /** Transaction date & the format is DD/MM/YYYY */
    internal var transDate: String
    /** Posting date & the format is  DD/MM/YYYY */
    internal var postDate: String
    /** Type of direction */
    internal var debitCreditFlag: String
    /** Return code */
    internal var responseCode: String
    /** Transaction description */
    internal var description: String
    /** Transaction reference number */
    internal var transactionRefNumber: String
    /** Currency code Ex: AED */
    internal var currency: String
    /** Amount */
    internal var amount: String
    /** Transaction Currency */
    internal var sourceCurrency: String
    /** Transaction amount */
    internal var sourceAmount: String
    /** Authorization code */
    internal var authCode: String?
    /** Merchant ID number */
    internal var merchantId: String?
    /** SIC */
    internal var merchantCategoryCode: String?
    /** Category Group */
    internal var merchantCategoryGroup: String?
    /** Merchant Name */
    internal var merchantName: String?
    /** MerchantMerchant Address */
    internal var merchantAddress: String?
    /** Merchant City */
    internal var merchantCity: String?
    /** Merchant Country */
    internal var merchantCountry: String?
    /** Transaction code */
    internal var transactionCode: String?
    /** Transaction Id */
    internal var transId: String?
    /** RETAIL */
    internal var balanceType: String?

    internal init(cardIdentifierType: String, cardIdentifierId: String, maskedPan: String, transDate: String, postDate: String, debitCreditFlag: String, responseCode: String, description: String, transactionRefNumber: String, currency: String, amount: String, sourceCurrency: String, sourceAmount: String, authCode: String? = nil, merchantId: String? = nil, merchantCategoryCode: String? = nil, merchantCategoryGroup: String? = nil, merchantName: String? = nil, merchantAddress: String? = nil, merchantCity: String? = nil, merchantCountry: String? = nil, transactionCode: String? = nil, transId: String? = nil, balanceType: String? = nil) {
        self.cardIdentifierType = cardIdentifierType
        self.cardIdentifierId = cardIdentifierId
        self.maskedPan = maskedPan
        self.transDate = transDate
        self.postDate = postDate
        self.debitCreditFlag = debitCreditFlag
        self.responseCode = responseCode
        self.description = description
        self.transactionRefNumber = transactionRefNumber
        self.currency = currency
        self.amount = amount
        self.sourceCurrency = sourceCurrency
        self.sourceAmount = sourceAmount
        self.authCode = authCode
        self.merchantId = merchantId
        self.merchantCategoryCode = merchantCategoryCode
        self.merchantCategoryGroup = merchantCategoryGroup
        self.merchantName = merchantName
        self.merchantAddress = merchantAddress
        self.merchantCity = merchantCity
        self.merchantCountry = merchantCountry
        self.transactionCode = transactionCode
        self.transId = transId
        self.balanceType = balanceType
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierType = "card_identifier_type"
        case cardIdentifierId = "card_identifier_id"
        case maskedPan = "masked_pan"
        case transDate = "trans_date"
        case postDate = "post_date"
        case debitCreditFlag = "debit_credit_flag"
        case responseCode = "response_code"
        case description
        case transactionRefNumber = "transaction_ref_number"
        case currency
        case amount
        case sourceCurrency = "source_currency"
        case sourceAmount = "source_amount"
        case authCode = "auth_code"
        case merchantId = "merchant_id"
        case merchantCategoryCode = "merchant_category_code"
        case merchantCategoryGroup = "merchant_category_group"
        case merchantName = "merchant_name"
        case merchantAddress = "merchant_address"
        case merchantCity = "merchant_city"
        case merchantCountry = "merchant_country"
        case transactionCode = "transaction_code"
        case transId = "trans_id"
        case balanceType = "balance_type"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(maskedPan, forKey: .maskedPan)
        try container.encode(transDate, forKey: .transDate)
        try container.encode(postDate, forKey: .postDate)
        try container.encode(debitCreditFlag, forKey: .debitCreditFlag)
        try container.encode(responseCode, forKey: .responseCode)
        try container.encode(description, forKey: .description)
        try container.encode(transactionRefNumber, forKey: .transactionRefNumber)
        try container.encode(currency, forKey: .currency)
        try container.encode(amount, forKey: .amount)
        try container.encode(sourceCurrency, forKey: .sourceCurrency)
        try container.encode(sourceAmount, forKey: .sourceAmount)
        try container.encodeIfPresent(authCode, forKey: .authCode)
        try container.encodeIfPresent(merchantId, forKey: .merchantId)
        try container.encodeIfPresent(merchantCategoryCode, forKey: .merchantCategoryCode)
        try container.encodeIfPresent(merchantCategoryGroup, forKey: .merchantCategoryGroup)
        try container.encodeIfPresent(merchantName, forKey: .merchantName)
        try container.encodeIfPresent(merchantAddress, forKey: .merchantAddress)
        try container.encodeIfPresent(merchantCity, forKey: .merchantCity)
        try container.encodeIfPresent(merchantCountry, forKey: .merchantCountry)
        try container.encodeIfPresent(transactionCode, forKey: .transactionCode)
        try container.encodeIfPresent(transId, forKey: .transId)
        try container.encodeIfPresent(balanceType, forKey: .balanceType)
    }
}

