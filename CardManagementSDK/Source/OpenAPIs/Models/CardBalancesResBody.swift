//
// CardBalancesResBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardBalancesResBody: Codable, JSONEncodable, Hashable {

    static let customerIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let institutionIdRule = StringRule(minLength: 1, maxLength: 5, pattern: nil)
    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardExpiryDateRule = StringRule(minLength: 1, maxLength: 4, pattern: nil)
    static let cardholderNameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let accountNumberRule = StringRule(minLength: 1, maxLength: 64, pattern: nil)
    /** Customer ID: Customer Identification number    This should be a unique number */
    internal var customerId: String
    /** institution id is the code that is created for each bank or FI(it is the same value as bank code), 982 value is just used as an example in Sandbox */
    internal var institutionId: String
    /** card identifier */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** YYMM Ex: 2310 */
    internal var cardExpiryDate: String
    /** Cardholder Name */
    internal var cardholderName: String
    /** Account number */
    internal var accountNumber: String
    internal var balances: [Balances]?

    internal init(customerId: String, institutionId: String, cardIdentifierId: String, cardIdentifierType: String, cardExpiryDate: String, cardholderName: String, accountNumber: String, balances: [Balances]? = nil) {
        self.customerId = customerId
        self.institutionId = institutionId
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.cardExpiryDate = cardExpiryDate
        self.cardholderName = cardholderName
        self.accountNumber = accountNumber
        self.balances = balances
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case customerId = "customer_id"
        case institutionId = "institution_id"
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case cardExpiryDate = "card_expiry_date"
        case cardholderName = "cardholder_name"
        case accountNumber = "account_number"
        case balances
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerId, forKey: .customerId)
        try container.encode(institutionId, forKey: .institutionId)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encode(cardExpiryDate, forKey: .cardExpiryDate)
        try container.encode(cardholderName, forKey: .cardholderName)
        try container.encode(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(balances, forKey: .balances)
    }
}

