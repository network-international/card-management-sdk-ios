//
// CardCreateResBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardCreateResBody: Codable, JSONEncodable, Hashable {

    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let maskedPanRule = StringRule(minLength: 1, maxLength: 16, pattern: nil)
    static let cardVirtualIndicatorRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    /** CardValue of card number, Token number, Ext_number */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** Masked PAN */
    internal var maskedPan: String
    /** P- Physical V- Virtual */
    internal var cardVirtualIndicator: String
    internal var customFields: [CustomFieldsCardCreate]?

    internal init(cardIdentifierId: String, cardIdentifierType: String, maskedPan: String, cardVirtualIndicator: String, customFields: [CustomFieldsCardCreate]? = nil) {
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.maskedPan = maskedPan
        self.cardVirtualIndicator = cardVirtualIndicator
        self.customFields = customFields
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case maskedPan = "masked_pan"
        case cardVirtualIndicator = "card_virtual_indicator"
        case customFields = "custom_fields"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encode(maskedPan, forKey: .maskedPan)
        try container.encode(cardVirtualIndicator, forKey: .cardVirtualIndicator)
        try container.encodeIfPresent(customFields, forKey: .customFields)
    }
}

