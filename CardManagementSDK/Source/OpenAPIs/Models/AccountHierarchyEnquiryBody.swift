//
// AccountHierarchyEnquiryBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct AccountHierarchyEnquiryBody: Codable, JSONEncodable, Hashable {

    static let customerIdRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let accountIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let accountIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let levelDownRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let clientTypeRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    static let balanceListRule = StringRule(minLength: 1, maxLength: 512, pattern: nil)
    /** Customer ID: Customer Identification number    This should be a unique number */
    internal var customerId: String
    /** Account Identifer ID should be passed if customer_id is not sent as part of the requesst */
    internal var accountIdentifierId: String
    /** CONTRACT_NUMBER */
    internal var accountIdentifierType: String
    /** it is applicable for corporate hierarchy value can be from 1 to 5 */
    internal var levelDown: String?
    /** applicable for corporate hierarchy Values: Commercial → C to way4 Private → P to way4 */
    internal var clientType: String?
    /** CONTRACT_NUMBER/EXID */
    internal var balanceList: String?

    internal init(customerId: String, accountIdentifierId: String, accountIdentifierType: String, levelDown: String? = nil, clientType: String? = nil, balanceList: String? = nil) {
        self.customerId = customerId
        self.accountIdentifierId = accountIdentifierId
        self.accountIdentifierType = accountIdentifierType
        self.levelDown = levelDown
        self.clientType = clientType
        self.balanceList = balanceList
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case customerId = "customer_id"
        case accountIdentifierId = "account_identifier_id"
        case accountIdentifierType = "account_identifier_type"
        case levelDown = "level_down"
        case clientType = "client_type"
        case balanceList = "balance_list"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(customerId, forKey: .customerId)
        try container.encode(accountIdentifierId, forKey: .accountIdentifierId)
        try container.encode(accountIdentifierType, forKey: .accountIdentifierType)
        try container.encodeIfPresent(levelDown, forKey: .levelDown)
        try container.encodeIfPresent(clientType, forKey: .clientType)
        try container.encodeIfPresent(balanceList, forKey: .balanceList)
    }
}

