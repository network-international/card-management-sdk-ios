//
// IdentityProofDocument.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct IdentityProofDocument: Codable, JSONEncodable, Hashable {

    static let numberRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let typeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let expiryDateRule = StringRule(minLength: 1, maxLength: 10, pattern: nil)
    /** ID Number */
    internal var number: String?
    /** passport, national_id, etc */
    internal var type: String?
    /** YYYY-MM-DD */
    internal var expiryDate: String?

    internal init(number: String? = nil, type: String? = nil, expiryDate: String? = nil) {
        self.number = number
        self.type = type
        self.expiryDate = expiryDate
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case number
        case type
        case expiryDate = "expiry_date"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(expiryDate, forKey: .expiryDate)
    }
}

