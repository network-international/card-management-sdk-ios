//
// CardLimitChangeBody.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

internal struct CardLimitChangeBody: Codable, JSONEncodable, Hashable {

    static let cardIdentifierIdRule = StringRule(minLength: 1, maxLength: 32, pattern: nil)
    static let cardIdentifierTypeRule = StringRule(minLength: 1, maxLength: 20, pattern: nil)
    static let cardRoleRule = StringRule(minLength: 1, maxLength: 1, pattern: nil)
    static let reasonDetailsRule = StringRule(minLength: 1, maxLength: 256, pattern: nil)
    /** card identifier */
    internal var cardIdentifierId: String
    /** CONTRACT_NUMBER  is used for clear card number or EXID which is a unique identifier for the card generated by CMS */
    internal var cardIdentifierType: String
    /** Role it can have 2 values - P (Primary) / S (Supplementary) */
    internal var cardRole: String
    internal var limit: CardLimitChangeBodyLimit
    /** Reason for limit change */
    internal var reasonDetails: String

    internal init(cardIdentifierId: String, cardIdentifierType: String, cardRole: String, limit: CardLimitChangeBodyLimit, reasonDetails: String) {
        self.cardIdentifierId = cardIdentifierId
        self.cardIdentifierType = cardIdentifierType
        self.cardRole = cardRole
        self.limit = limit
        self.reasonDetails = reasonDetails
    }

    internal enum CodingKeys: String, CodingKey, CaseIterable {
        case cardIdentifierId = "card_identifier_id"
        case cardIdentifierType = "card_identifier_type"
        case cardRole = "card_role"
        case limit
        case reasonDetails = "reason_details"
    }

    // Encodable protocol methods

    internal func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(cardIdentifierId, forKey: .cardIdentifierId)
        try container.encode(cardIdentifierType, forKey: .cardIdentifierType)
        try container.encode(cardRole, forKey: .cardRole)
        try container.encode(limit, forKey: .limit)
        try container.encode(reasonDetails, forKey: .reasonDetails)
    }
}

